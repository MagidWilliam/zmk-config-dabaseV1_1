#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
        behaviors {
        new_behavior: new_behavior {
            compatible = "zmk,behavior-sensor-rotate";
            label = "NEW_BEHAVIOR";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCROLL_DOWN>, <&msc SCROLL_UP>;
        };
    };
    
    combos {
        compatible = "zmk,combos";

        hotalt {
            bindings = <&mo 6>;
            key-positions = <34 35>;
        };

        gaming {
            bindings = <&tog 7>;
            key-positions = <33 34>;
        };

        Lshift-0 {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <13 31>;
        };

        Lshift-1 {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <13 32>;
        };

        Rshift-0 {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <16 35>;
        };

        Rshift-1 {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <16 36>;
        };

        Lctrl_0 {
            bindings = <&kp LCTRL>;
            key-positions = <12 31>;
        };

        Lctrl_1 {
            bindings = <&kp LCTRL>;
            key-positions = <12 32>;
        };

        Rctrl_0 {
            bindings = <&kp LCTRL>;
            key-positions = <17 35>;
        };

        Rctrl_1 {
            bindings = <&kp LCTRL>;
            key-positions = <17 36>;
        };

        Lalt_0 {
            bindings = <&kp LEFT_ALT>;
            key-positions = <11 31>;
        };

        Lalt_1 {
            bindings = <&kp LEFT_ALT>;
            key-positions = <11 32>;
        };

        Ralt_0 {
            bindings = <&kp LEFT_ALT>;
            key-positions = <35 18>;
        };

        Ralt_1 {
            bindings = <&kp LEFT_ALT>;
            key-positions = <18 36>;
        };

        Lgui_0 {
            bindings = <&kp LEFT_GUI>;
            key-positions = <10 31>;
        };

        Lgui_1 {
            bindings = <&kp LEFT_GUI>;
            key-positions = <10 32>;
        };

        Rgui_0 {
            bindings = <&kp LEFT_GUI>;
            key-positions = <35 19>;
        };

        Rgui_1 {
            bindings = <&kp LEFT_GUI>;
            key-positions = <19 36>;
        };

        toggleQwerty {
            bindings = <&tog 2>;
            key-positions = <31 36>;
        };

        hamza {
            bindings = <&kp X>;
            key-positions = <12 17>;
        };

        ya2 {
            bindings = <&kp Z>;
            key-positions = <11 18>;
        };

        wa2 {
            bindings = <&kp C>;
            key-positions = <10 19>;
        };
    };

    macros {
        arrowfunc: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp EQUAL &kp GT &kp LEFT_BRACE>;
            label = "NEW_MACRO";
        };

        lemmein: lemmein {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp D &kp HASH &kp H &kp E &kp L &kp L &kp O &kp W &kp O &kp R &kp L &kp D &kp HASH &kp N2 &kp N9>;
            label = "LEMMEIN";
        };

        switch_to_arabic: switch_to_arabic {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &tog 2>;
            label = "SWITCH_TO_ARABIC";
        };

        switch_to_english: switch_to_english {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &tog 0>;
            label = "SWITCH_TO_ENGLISH";
        };
    };

    keymap {
        compatible = "zmk,keymap";
        label = "corne-unified";

        default_layer {
            bindings = <
                &mmv MOVE_UP  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T
                &kp TAB     &kp Q  &kp W  &kp E  &kp R  &kp T    &kp ESC  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5
                &kp CAPS    &kp A  &kp S  &kp D  &kp F  &kp G    &kp LSHFT &kp Z &kp X  &kp C  &kp V  &kp B
                &kp LSHFT   &kp Z &kp X  &kp C  &kp V  &kp B    &kp CAPS &kp A  &kp S  &kp D  &kp F  &kp G
                &kp SPC     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0   &kp ESC  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5
                &kp ESC     &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp SPC  &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
                &kp SPC     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0   &kp ESC  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5
                &kp ESC     &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp SPC  &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        qwerty-bkb {
            bindings = <
  &kp Q  &kp W       &kp E      &kp R        &kp T          &kp Y            &kp U            &kp I        &kp O    &kp P
  &kp A  &kp S       &kp D      &kp F        &kp G          &kp H            &kp J            &kp K        &kp L    &kp SQT
  &kp Z  &kp X       &kp C      &kp V        &kp B          &kp N            &kp M            &kp COMMA    &kp DOT  &kp FSLH
         &kp C_MUTE  &lt 5 TAB  &lt 6 SPACE  &lt 5 GRAVE    &lt 6 LA(LG(C))  &lt 4 BACKSPACE  &lt 3 ENTER
            >;
        };

        Qwerty {
            bindings = <
  &kp GRAVE  &kp R       &kp T      &kp W        &kp Q          &kp E            &kp P            &kp O        &kp Y    &kp U
  &kp H      &kp S       &kp V      &kp J        &kp G          &kp L            &kp K            &kp N        &kp D    &kp COMMA
  &kp DOT    &kp A       &kp LBKT   &kp RBKT     &kp F          &kp SEMI         &kp I            &kp M        &kp SQT  &kp FSLH
             &kp C_MUTE  &lt 5 TAB  &lt 6 SPACE  &lt 5 GRAVE    &lt 6 LA(LG(C))  &lt 4 BACKSPACE  &lt 3 ENTER
            >;
        };

        NUM {
            bindings = <
  &kp GRAVE  &kp MINUS  &kp EQUAL             &kp APOS               &kp ASTRK                &kp F1  &kp LS(BACKSLASH)  &kp AMPERSAND  &kp BSLH      &kp ESC
  &kp N1     &kp N2     &kp N3                &kp N4                 &kp N5                   &kp F2  &kp LEFT_SHIFT     &kp LCTRL      &kp LEFT_ALT  &kp LEFT_GUI
  &kp N0     &kp N6     &kp N7                &kp N8                 &kp N9                   &kp F3  &kp F4             &kp F5         &kp F6        &kp F7
             &trans     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &trans  &trans             &trans
            >;
        };

        symbol {
            label = "sym";
            bindings = <
  &kp GRAVE  &kp MINUS  &kp EQUAL         &kp APOS           &kp ASTRK            &kp F1  &kp LS(BACKSLASH)  &kp AMPERSAND  &kp BSLH      &kp ESC
  &kp N1     &kp N2     &kp N3            &kp N4             &kp N5               &kp F2  &kp LEFT_SHIFT     &kp LCTRL      &kp LEFT_ALT  &kp LEFT_WIN
  &kp N0     &kp N6     &kp N7            &kp N8             &kp N9               &kp F3  &kp F4             &kp F5         &kp COMMA     &kp DOT
             &trans     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_BRACKET    &trans  &trans             &trans
            >;
        };

        ARROWS {
            bindings = <
  &kp LC(X)     &kp LC(C)     &kp LC(V)   &kp LC(Z)       &kp LC(F)            &trans      &kp PG_UP   &kp UP             &kp PG_DN        &kp ESC
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL   &kp LEFT_SHIFT  &kp F11              &kp HOME    &kp LEFT    &kp DOWN           &kp RIGHT        &kp END
  &kp F6        &kp F7        &kp F8      &kp F9          &kp F10              &bt BT_CLR  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &bt BT_SEL 0
                &trans        &arrowfunc  &trans          &switch_to_arabic    &trans      &kp DELETE  &none
            >;
        };

        MOUSE {
            bindings = <
  &kp LC(X)     &kp LC(C)     &kp LC(V)   &kp LC(Z)       &kp LC(F)    &arrowfunc        &msc SCROLL_UP  &mmv MOVE_UP    &msc SCROLL_DOWN  &kp ESCAPE
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL   &kp LEFT_SHIFT  &kp F5       &msc SCROLL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &msc SCROLL_RIGHT
  &kp F1        &kp F2        &kp F3      &kp F4          &kp F12      &trans            &mkp MB2        &mkp MB1        &mkp MB3          &arrowfunc
                &trans        &arrowfunc  &trans          &lemmein     &mkp MB3          &mkp MB2        &mkp MB1
            >;
        };

        gaming {
            bindings = <
  &mt ESC TAB     &kp Q   &kp W      &kp E      &kp R           &kp T    &msc SCROLL_UP  &kp UP        &msc SCROLL_DOWN  &kp O
  &kp CAPS        &kp A   &kp S      &kp D      &kp F           &kp G    &kp LEFT        &kp DOWN      &kp RIGHT         &kp L
  &kp LEFT_SHIFT  &kp Z   &kp X      &kp C      &kp V           &kp B    &kp NUMBER_4    &kp NUMBER_8  &kp NUMBER_5      &kp NUMBER_6
                  &trans  &kp LCTRL  &kp SPACE  &kp LEFT_ALT    &kp ESC  &kp DEL         &kp ENTER
            >;
        };

        mirror_arrow {
            bindings = <
  &kp ESCAPE    &kp PG_UP     &kp UP        &kp PG_DN     &trans        &kp LC(X)  &kp LC(C)       &kp LC(V)  &kp LC(Z)     &kp LC(F)
  &kp END       &kp LEFT      &kp DOWN      &kp RIGHT     &kp HOME      &trans     &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &kp F1     &kp F2          &kp F3     &kp F4        &kp F5
                &trans        &trans        &trans        &none         &trans     &trans          &none
            >;
        };

        mirror_mouse {
            bindings = <
  &kp ESCAPE        &msc SCROLL_UP  &mmv MOVE_UP    &msc SCROLL_DOWN  &arrowfunc           &kp LC(X)  &kp LC(C)       &kp LC(V)  &kp LC(Z)     &kp LC(F)
  &msc SCROLL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &msc SCROLL_RIGHT    &trans     &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI
  &trans            &mkp MB3        &mkp MB1        &mkp MB2          &trans               &kp F1     &kp F2          &kp F3     &kp F4        &kp F5
                    &trans          &mkp MB1        &mkp MB2          &mkp MB3             &trans     &trans          &none
            >;
        };
    };
};
