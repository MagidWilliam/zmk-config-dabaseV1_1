#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        scroll_behavior: scroll_behavior {
            compatible = "zmk,behavior-sensor-rotate";
            label = "SCROLL_BEHAVIOR";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        gaming {
            bindings = <&tog 7>;
            key-positions = <33 32>;
        };

        hamza {
            bindings = <&kp X>;
            key-positions = <12 17>;
        };

        ya2 {
            bindings = <&kp Z>;
            key-positions = <11 18>;
        };

        wa2 {
            bindings = <&kp C>;
            key-positions = <10 19>;
        };

        rhotmouse {
            bindings = <&mo 6>;
            key-positions = <34 33>;
        };

        lhotarrow {
            bindings = <&mo 8>;
            key-positions = <32 31>;
        };

        lshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <35 16>;
        };

        rshift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <13 30>;
        };

        lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <35 17>;
        };

        rctrl {
            bindings = <&kp LCTRL>;
            key-positions = <12 30>;
        };

        lalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <35 18>;
        };

        ralt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <11 30>;
        };

        lgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <35 19>;
        };

        rgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <10 30>;
        };

        quickD {
            bindings = <&kp D>;
            key-positions = <20 29>;
        };

        quickV {
            bindings = <&kp V>;
            key-positions = <21 28>;
        };
    };

    macros {
        arrowfunc: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp EQUAL &kp GT &kp LEFT_BRACE>;
            label = "NEW_MACRO";
        };

        lemmein: lemmein {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp D &kp HASH &kp H &kp E &kp L &kp L &kp O &kp W &kp O &kp R &kp L &kp D &kp AT_SIGN &kp N2 &kp N9 &kp ENTER>;
            label = "LEMMEIN";
        };

        switch_to_arabic: switch_to_arabic {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &tog 2>;
            label = "SWITCH_TO_ARABIC";
        };

        switch_to_english: switch_to_english {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &tog 0>;
            label = "SWITCH_TO_ENGLISH";
        };
    };

    keymap {
        compatible = "zmk,keymap";
        label = "corne-unified";

        default_layer {
            bindings = <
                &bt BT_CLR  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp TAB  &kp Q  &kp W  &kp E  &kp R  &kp T
                &kp TAB     &kp Q  &kp W  &kp E  &kp R  &kp T    &kp ESC  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5
                &kp CAPS    &kp A  &kp S  &kp D  &kp F  &kp G    &kp LSHFT &kp Z &kp X  &kp C  &kp V  &kp B
                &kp LSHFT   &kp Z &kp X  &kp C  &kp V  &kp B    &kp CAPS &kp A  &kp S  &kp D  &kp F  &kp G
                &kp SPC     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0   &kp ESC  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5
                &kp ESC     &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp SPC  &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
                &kp SPC     &kp N6 &kp N7 &kp N8 &kp N9 &kp N0   &kp ESC  &kp N1 &kp N2 &kp N3 &kp N4 &kp N5
                &kp ESC     &kp N1 &kp N2 &kp N3 &kp N4 &kp N5   &kp SPC  &kp N6 &kp N7 &kp N8 &kp N9 &kp N0
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&scroll_behavior>;
        };

        qwerty-bkb {
            bindings = <
  &kp Q  &kp W  &kp E  &kp R      &kp T                     &kp Y            &kp U            &kp I        &kp O    &kp P
  &kp A  &kp S  &kp D  &kp F      &kp G                     &kp H            &kp J            &kp K        &kp L    &kp SQT
  &kp Z  &kp X  &kp C  &kp V      &kp B                     &kp N            &kp M            &kp COMMA    &kp DOT  &kp FSLH
                       &lt 5 TAB  &lt 5 GRAVE  &lt 6 SPACE  &lt 4 BACKSPACE  &lt 6 LA(LG(C))  &lt 3 ENTER
            >;
        };

        Qwerty {
            bindings = <
  &kp Q      &kp W  &kp T  &kp F              &kp R                          &kp E            &kp G            &kp U        &kp Y       &kp O
  &kp H      &kp S  &kp V  &kp J              &kp LEFT_BRACKET               &kp L            &kp K            &kp N        &kp D       &kp COMMA
  &kp GRAVE  &kp A  &kp M  &kp RIGHT_BRACKET  &kp SQT                        &kp SEMI         &kp I            &kp COMMA    &kp PERIOD  &kp SLASH
                           &lt 5 TAB          &lt 5 GRAVE       &lt 6 SPACE  &lt 4 BACKSPACE  &lt 6 LA(LG(C))  &lt 3 ENTER
            >;
        };

        NUM {
            bindings = <
  &kp GRAVE  &kp MINUS  &kp EQUAL  &kp APOS              &kp ASTRK                                     &kp F1  &kp LS(BACKSLASH)  &kp AMPERSAND  &kp BSLH      &kp ESC
  &kp N1     &kp N2     &kp N3     &kp N4                &kp N5                                        &kp F2  &kp LEFT_SHIFT     &kp LCTRL      &kp LEFT_ALT  &kp LEFT_GUI
  &kp N0     &kp N6     &kp N7     &kp N8                &kp N9                                        &kp F3  &kp F4             &kp F5         &kp COMMA     &kp PERIOD
                                   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans             &trans
            >;
        };

        symbol {
            label = "sym";
            bindings = <
  &kp GRAVE  &kp MINUS  &kp EQUAL  &kp APOS          &kp ASTRK                             &kp F1  &kp LS(BACKSLASH)  &kp AMPERSAND  &kp BSLH      &kp ESC
  &kp N1     &kp N2     &kp N3     &kp N4            &kp N5                                &kp F2  &kp LEFT_SHIFT     &kp LCTRL      &kp LEFT_ALT  &kp LEFT_WIN
  &kp N0     &kp N6     &kp N7     &kp N8            &kp N9                                &kp F3  &kp F4             &kp F5         &kp COMMA     &kp DOT
                                   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_BRACKET  &trans  &trans             &trans
            >;
        };

        ARROWS {
            bindings = <
  &kp LC(X)     &kp LC(C)     &kp LC(V)  &kp LG(V)       &kp LC(S)                     &bt BT_CLR     &kp PG_UP     &kp UP    &kp PG_DN  &kp ESC
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &kp F11                       &kp HOME       &kp LEFT      &kp DOWN  &kp RIGHT  &kp END
  &kp F6        &kp F7        &kp F8     &kp F9          &kp F10                       &bt BT_SEL 0   &bt BT_SEL 1  &trans    &trans     &trans
                                         &arrowfunc      &trans     &switch_to_arabic  &kp BACKSPACE  &kp DELETE    &trans
            >;
        };

        MOUSE {
            bindings = <
  &kp LC(X)     &kp LC(C)     &kp LC(V)  &kp LC(Z)       &kp LC(F)            &arrowfunc      &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &kp ESCAPE
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &kp F5               &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT
  &kp F1        &kp F2        &kp F3     &kp F4          &kp F12              &trans          &mkp MB2        &mkp MB1        &mkp MB3         &arrowfunc
                                         &arrowfunc      &trans     &lemmein  &mkp MB3        &mkp MB2        &mkp MB1
            >;
        };

        gaming {
            bindings = <
  &mt ESC TAB     &kp Q  &kp W  &kp E         &kp R                 &kp T    &msc SCRL_UP   &kp UP     &msc SCRL_DOWN  &kp O
  &kp CAPS        &kp A  &kp S  &kp D         &kp F                 &kp G    &kp LEFT       &kp DOWN   &kp RIGHT       &kp L
  &kp LEFT_SHIFT  &kp Z  &kp X  &kp C         &kp V                 &kp B    &kp N1         &kp N2     &kp N3          &kp N4
                                &kp LEFT_ALT  &kp LCTRL  &kp SPACE  &kp DEL  &kp BACKSPACE  &kp ENTER
            >;
        };

        mirror_arrow {
            bindings = <
  &kp ESCAPE  &kp PG_UP  &kp UP    &kp PG_DN  &bt BT_SEL 1          &kp LC(F)  &kp LC(Z)       &kp LC(V)  &kp LC(C)     &kp LC(X)
  &kp END     &kp LEFT   &kp DOWN  &kp RIGHT  &kp HOME              &kp F11    &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI
  &trans      &trans     &trans    &trans     &bt BT_SEL 0          &kp F10    &kp F9          &kp F8     &kp F7        &kp F6
                                   &trans     &trans        &trans  &trans     &trans          &trans
            >;
        };

        mirror_mouse {
            bindings = <
  &kp ESCAPE      &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &arrowfunc                 &kp LC(F)  &kp LC(Z)       &kp LC(V)  &kp LC(C)     &kp LC(X)
  &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT            &kp F5     &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI
  &trans          &mkp MB3        &mkp MB1        &mkp MB2         &trans                     &kp F12    &kp F4          &kp F3     &kp F2        &kp F1
                                                  &mkp MB1         &mkp MB2         &mkp MB3  &trans     &trans          &trans
            >;
        };
    };
};
